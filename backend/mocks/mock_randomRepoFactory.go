// Code generated by MockGen. DO NOT EDIT.
// Source: backend/repository/random/randomeRepoFactory.go
//
// Generated by this command:
//
//	mockgen -source=backend/repository/random/randomeRepoFactory.go -destination=backend/mocks/mock_randomRepoFactory.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	random "react-go-practice/repository/random"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRandomRepoFactory is a mock of RandomRepoFactory interface.
type MockRandomRepoFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRandomRepoFactoryMockRecorder
	isgomock struct{}
}

// MockRandomRepoFactoryMockRecorder is the mock recorder for MockRandomRepoFactory.
type MockRandomRepoFactoryMockRecorder struct {
	mock *MockRandomRepoFactory
}

// NewMockRandomRepoFactory creates a new mock instance.
func NewMockRandomRepoFactory(ctrl *gomock.Controller) *MockRandomRepoFactory {
	mock := &MockRandomRepoFactory{ctrl: ctrl}
	mock.recorder = &MockRandomRepoFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomRepoFactory) EXPECT() *MockRandomRepoFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRandomRepoFactory) Create() random.RandomRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(random.RandomRepository)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRandomRepoFactoryMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRandomRepoFactory)(nil).Create))
}
