// Code generated by MockGen. DO NOT EDIT.
// Source: backend/repository/random/randomRepo.go
//
// Generated by this command:
//
//	mockgen -source=backend/repository/random/randomRepo.go -destination=backend/mocks/mock_randomRepo.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRandomRepository is a mock of RandomRepository interface.
type MockRandomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRandomRepositoryMockRecorder
	isgomock struct{}
}

// MockRandomRepositoryMockRecorder is the mock recorder for MockRandomRepository.
type MockRandomRepositoryMockRecorder struct {
	mock *MockRandomRepository
}

// NewMockRandomRepository creates a new mock instance.
func NewMockRandomRepository(ctrl *gomock.Controller) *MockRandomRepository {
	mock := &MockRandomRepository{ctrl: ctrl}
	mock.recorder = &MockRandomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomRepository) EXPECT() *MockRandomRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRandomRepository) Create(ctx context.Context, random int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, random)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRandomRepositoryMockRecorder) Create(ctx, random any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRandomRepository)(nil).Create), ctx, random)
}

// Delete mocks base method.
func (m *MockRandomRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRandomRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRandomRepository)(nil).Delete), ctx, id)
}

// Read mocks base method.
func (m *MockRandomRepository) Read(ctx context.Context, id int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRandomRepositoryMockRecorder) Read(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRandomRepository)(nil).Read), ctx, id)
}

// Update mocks base method.
func (m *MockRandomRepository) Update(ctx context.Context, id int, random int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, random)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRandomRepositoryMockRecorder) Update(ctx, id, random any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRandomRepository)(nil).Update), ctx, id, random)
}
